//THViewController.h

//THViewController.h
//Crystal Ball

#import <UIKit/UIKit.h>
@class THCrystalBall;    //specify forward declaration

@interface THViewController : UIViewController
@property (strong, nonatomic) IBOutlet UILabel *predictionLabel;
@property (strong, nonatomic) THCrystalBall *crystalBall;
//- (IBAction) buttonPressed; we’re removing the button so can just shake device OR click on crystal ball to get prediction
@property (strong, nonatomic) IBOutlet UIImageView * backgroundImageView;//tuxedo icon R click on image view on device in "ViewController/View/Image View - background" click on New Referencing Outlet and drag to header file call it 
backgroundImageView (see code above)
- (void) makePrediction;//note that randomPrediction is a repetitive task so we're creating this method; this method will take random prediction and assign it to our text label
@end





THViewController.m

//THViewController.m
//Crystal Ball

#import “THViewController.h”
#import “THCrystalBall.h”

@interface THViewController()
@end

@implementation THViewController
-(void)viewDidLoad
{
	[super viewDidLoad];
	self.crystalBall = [[THCrystalBall alloc] init];

//Note: the following code is ok, but teamtreehouse deleted it because of auto //layout – want all interface stuff in main.storyboard
	//UIImage *backgroundImage = [UIImage imageNamed:@"background”];
//	UIImageView *imageView = [[UIImageView alloc] //initWithImage:backgroundImage];
//[self.view insertSubview:imageView atIndex:0];


}

-(void) viewDidAppear : (BOOL)animated {

	[super viewDidAppear: animated];
CGRect frame = self.predictionLable.frame;
}

-(void)viewDidLoad
{
	[super viewDidLoad];
	self.crystalBall = [[THCrystalBall alloc] init];
	self.backgroundImageView.animationImages = [[NSArray alloc] initwithObjects: [UIImage imageNamed:@"CB0001"], 
																				[UIImage imageNamed:@"CB0002"],
																				[UIImage imageNamed:@"CB0003"],
																				[UIImage imageNamed:@"CB0004"],
																				[UIImage imageNamed:@"CB0005"],
																				[UIImage imageNamed:@"CB0006"],nil];//need to put all 60 objects here
	self.backgroundImageView.animationDuration = 2.5f;//60 divided by 24
	self.backgroundImageView.animationRepeatCount = 1;
}


- (void)didReceiveMemoryWarning
{
 	[super didReceiveMemoryWarning];

}
#pragma mark - Prediction

- (void) makePrediction {
	self.backgroundImageView startAnimating];
	self.predictionLabel.text = [self.crystalBall randomPrediction];
	
}

//- (IBAction)buttonPressed {  we replaced this code, so would just shake it or click on crystal ball to change prediction, removed button
	
//	self.predictionLabel.text = [self.crystalBall randomPrediction];
//}

#pragma mark – Motion Events//this is to organize methods

- (void) motionBegan: (UIEventSubtype)motion withEvent: (UIEvent *)event {
	//NSLog(@”motion began”);  //added this with NSLog below to see if when we simulated the shake this was added to console
	self.predictionLabel.text = nil;
}

- (void) motionEnded: (UIEventSubtype)motion withEvent: (UIEvent *)event {
	// NSLog(@”motion began”);  //added this to see if would appear in console
	if ( motion == UIEventSubtypeMotionShake ) {
		[self makePrediction];

		//self.predictionLabel.text = [self.crystalBall randomPrediction];//when shake device prediction will display  commenting this out because now have void makePrediction method

	}
}

- (void) motionCancelled: (UIEventSubtype)motion withEvent: (UIEvent *)event {
	NSLog(@”motion cancelled”); //added this to see if would appear in console
}

#pragma mark – Touch Events//this is to organize methods

-(void) touchesBegan: (NSSet *)touches withEvent:(UIEvent *) event {
	self.predictionLabel.text =  nil;
}

-(void) touchesEnded: (NSSet *)touches withEvent:(UIEvent *) event { 
	[self makePrediction];

	//self.predictionLabel.text =  [self.cystalBall randomPrediction]; we delete this code now that have void makePrediction method
}

-(void) touchesCancelled: (NSSet *)touches withEvent:(UIEvent *) event { 
	NSLog(@”touches cancelled”);
}

@end


THCrystalBall.h


//THCrystalBall.h
//CrystalBall

#import ,Foundation/Foundation.h>

@interface THCrystalBall : NSObject {
	NSArray *_predictions;
}

@property (strong, nonatomic, readonly) NSArray *predictions;//readonl prevents accidental modification of property values

- (NSString*) randomPrediction;    //- this minus sign indicates instance method

@end

THCrystalBall.m

//THCrystalBall.m
//CrystalBall

#import “THCrystalBall.h”
@implementation THCrystalBall

- (NSArray *) prediction {
	if (_predictions == nil) {
		_predictions = [[NSArray alloc] initWithObjects:@”It is Certain, @”It is 			Decidedly So”, @”All signs say YES”, nil];

	}

	return  _predictions;

}

-  (NSString*) randomPrediction {
	int random = arc4andom_uniform(self.predictions.count);
	return [self.predictions objectAtIndex:random];
	
}

@end

